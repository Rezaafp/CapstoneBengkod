# -*- coding: utf-8 -*-
"""DeploymentBengkod.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lqsEPbV0hoxvn_2-hKaBQjuSDg7XTcWO
"""

!pip install pandas
!pip install numpy
!pip install matplotlib
!pip install seaborn
!pip install sklearn
!pip install pyngrok

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
import streamlit as st
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score,recall_score,f1_score,precision_score,roc_auc_score,confusion_matrix,precision_score

water_potability_df = pd.read_csv('https://drive.google.com/uc?id=1cWZzfVkEw3xMcIanmtb-xi-7nVBKjMRl')
# ... (kode untuk memuat model dan data) ...
# Mengisi kolom numerik dengan mean
water_potability_df.fillna(water_potability_df.mean(), inplace=True)

# Fitur (X)
X = water_potability_df[['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate', 'Conductivity', 'Organic_carbon', 'Trihalomethanes', 'Turbidity']]

# Target (y)
y = water_potability_df['Potability']

# Membagi data menjadi data training dan testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

clean_classifier_nb = GaussianNB()
clean_classifier_nb .fit(X_train, y_train)
clean_classifier_dt = DecisionTreeClassifier(random_state=42)
clean_classifier_dt .fit(X_train, y_train)
clean_classifier_rf = RandomForestClassifier(n_estimators=100, random_state=42)
clean_classifier_rf .fit(X_train, y_train)

y_pred_nb = clean_classifier_nb.predict(X_test)
y_pred_dt = clean_classifier_dt.predict(X_test)
y_pred_rf = clean_classifier_rf.predict(X_test)

# Inisialisasi StandardScaler
scaler = StandardScaler()

# Melakukan fit dan transform pada data training
X_train_scaled = scaler.fit_transform(X_train)

# Melakukan transform pada data testing (menggunakan parameter yang dipelajari dari data training)
X_test_scaled = scaler.transform(X_test)

# --- Sebelum Normalisasi ---
# Akurasi model sebelum normalisasi (sudah dihitung sebelumnya)
accuracy_nb = round(accuracy_score(y_test, y_pred_nb), 3)
accuracy_dt = round(accuracy_score(y_test, y_pred_dt), 3)
accuracy_rf = round(accuracy_score(y_test, y_pred_rf), 3)

# --- Setelah Normalisasi ---
# Prediksi model setelah normalisasi (sudah dihitung sebelumnya)
y_pred_nbN = clean_classifier_nb.predict(X_test_scaled)
y_pred_dtN = clean_classifier_dt.predict(X_test_scaled)
y_pred_rfN = clean_classifier_rf.predict(X_test_scaled)

# Akurasi model setelah normalisasi
accuracy_nbN = round(accuracy_score(y_test, y_pred_nbN), 3)
accuracy_dtN = round(accuracy_score(y_test, y_pred_dtN), 3)
accuracy_rfN = round(accuracy_score(y_test, y_pred_rfN), 3)

# --- Perbandingan Akurasi ---
# Membuat DataFrame untuk perbandingan
data = {
    'Model': ['Naive Bayes', 'Decision Tree', 'Random Forest'],
    'Akurasi Sebelum Normalisasi': [accuracy_nb, accuracy_dt, accuracy_rf],
    'Akurasi Setelah Normalisasi': [accuracy_nbN, accuracy_dtN, accuracy_rfN]
}

# --- Fungsi untuk membuat visualisasi ---
def plot_confusion_matrix(y_true, y_pred, title):
    cm = confusion_matrix(y_true, y_pred)
    plt.figure(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
    plt.title(title)
    plt.xlabel("Prediksi")
    plt.ylabel("Aktual")
    st.pyplot(plt)

models = ['Naive Bayes', 'Decision Tree', 'Random Forest']
before_normalization = [accuracy_nb, accuracy_dt, accuracy_rf]
after_normalization = [accuracy_nbN, accuracy_dtN, accuracy_rfN]

def plot_accuracy_comparison(before, after, models):
    x = np.arange(len(models))
    width = 0.35
    fig, ax = plt.subplots()
    # ... (kode untuk membuat bar plot seperti sebelumnya) ...
    rects1 = ax.bar(x - width/2, before_normalization, width, label='Sebelum Normalisasi')
    rects2 = ax.bar(x + width/2, after_normalization, width, label='Setelah Normalisasi')
    # Menambahkan label, judul, dan legend
    ax.set_ylabel('Akurasi')
    ax.set_title('Perbandingan Akurasi Model Sebelum dan Sesudah Normalisasi')
    ax.set_xticks(x)
    ax.set_xticklabels(models)
    ax.legend()

    # Menambahkan label nilai di atas setiap bar
    def autolabel(rects):
        for rect in rects:
            height = rect.get_height()
            ax.annotate('{}'.format(height),
                        xy=(rect.get_x() + rect.get_width() / 2, height),
                        xytext=(0, 3),
                        textcoords="offset points",
                        ha='center', va='bottom')

    autolabel(rects1)
    autolabel(rects2)

    st.pyplot(fig)

# --- Streamlit App ---
st.title("Deployment Model Prediksi Kualitas Air")

# --- Sidebar ---
model_choice = st.sidebar.selectbox("Pilih Model:", ['Naive Bayes', 'Decision Tree', 'Random Forest'])

# --- Menampilkan hasil berdasarkan pilihan model ---
if model_choice == 'Naive Bayes':
    st.header("Naive Bayes")
    # ... (kode untuk menampilkan grafik dan akurasi Naive Bayes) ...
    plot_confusion_matrix(y_test, y_pred_nb, "Confusion Matrix - Naive Bayes (Sebelum Normalisasi)")
    plot_confusion_matrix(y_test, y_pred_nbN, "Confusion Matrix - Naive Bayes (Setelah Normalisasi)")
    # ...
elif model_choice == 'Decision Tree':
    st.header("Decision Tree")
    # ... (kode untuk menampilkan grafik dan akurasi Decision Tree) ...
    plot_confusion_matrix(y_test, y_pred_dt, "Confusion Matrix - Naive Bayes (Sebelum Normalisasi)")
    plot_confusion_matrix(y_test, y_pred_dtN, "Confusion Matrix - Naive Bayes (Setelah Normalisasi)")
elif model_choice == 'Random Forest':
    st.header("Random Forest")
    # ... (kode untuk menampilkan grafik dan akurasi Random Forest) ...
    plot_confusion_matrix(y_test, y_pred_rf, "Confusion Matrix - Naive Bayes (Sebelum Normalisasi)")
    plot_confusion_matrix(y_test, y_pred_rfN, "Confusion Matrix - Naive Bayes (Setelah Normalisasi)")

# --- Perbandingan Akurasi ---
st.header("Perbandingan Akurasi Model")
plot_accuracy_comparison(before_normalization, after_normalization, models)
